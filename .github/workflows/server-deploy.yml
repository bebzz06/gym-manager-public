name: Server CI/CD Pipeline

on:
  push:
    branches: [master]
    paths: ['server/**', 'shared/**', '.github/workflows/server-deploy.yml']
  pull_request:
    branches: [master]
    paths: ['server/**', 'shared/**', '.github/workflows/server-deploy.yml']
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: us-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPOSITORY_NAME: gym-manager
  SERVICE_NAME: gym-manager-server

jobs:
  # Test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          # Generate short unique database name for this test run (max 38 chars for Atlas)
          TIMESTAMP=$(date +%Y%m%d_%H%M)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SHORT_ID="pr${{ github.event.number }}"
          else
            SHORT_ID="run$(echo ${{ github.run_id }} | tail -c 9)"
          fi
          UNIQUE_DB_NAME="test_${TIMESTAMP}_${SHORT_ID}"

          # Ensure name doesn't exceed 38 characters
          if [ ${#UNIQUE_DB_NAME} -gt 38 ]; then
            UNIQUE_DB_NAME=$(echo "$UNIQUE_DB_NAME" | cut -c1-38)
          fi

          echo "Generated test database name: $UNIQUE_DB_NAME (${#UNIQUE_DB_NAME} chars)"

          # Validate database name doesn't exceed 38 characters
          if [ ${#UNIQUE_DB_NAME} -gt 38 ]; then
            echo "❌ FATAL: Database name '$UNIQUE_DB_NAME' is ${#UNIQUE_DB_NAME} characters - exceeds Atlas limit of 38!"
            exit 1
          fi

          # Validate database name contains 'test' for safety
          if [[ ! "$UNIQUE_DB_NAME" == *"test"* ]]; then
            echo "❌ FATAL: Database name '$UNIQUE_DB_NAME' doesn't contain 'test' - safety check failed!"
            exit 1
          fi

          echo "✅ Database name validation passed: $UNIQUE_DB_NAME (${#UNIQUE_DB_NAME}/38 chars)"

          # Create test environment file
          echo "NODE_ENV=test" > server/.env.test
          echo "MONGODB_URI=${{ secrets.MONGODB_TEST_URI }}" >> server/.env.test
          echo "DB_NAME=${UNIQUE_DB_NAME}" >> server/.env.test
          echo "JWT_SECRET=test-secret-key-$(date +%s)" >> server/.env.test
          echo "JWT_REFRESH_SECRET=test-refresh-secret-$(date +%s)" >> server/.env.test
          echo "LOG_LEVEL=error" >> server/.env.test
          echo "TEST_DB_NAME=${UNIQUE_DB_NAME}" >> server/.env.test
          echo "HOST=0.0.0.0" >> server/.env.test
          echo "PORT=3000" >> server/.env.test

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/Dockerfile
          target: testing
          load: true
          tags: gym-manager-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests
        run: |
          echo "🚀 Starting test execution with Docker Compose..."
          set -e  # Exit immediately on any error

          # Run tests using docker compose
          if ! docker compose -f docker-compose.ci.yml up --build --abort-on-container-exit test-runner; then
            echo "❌ Tests failed!"

            # Show logs for debugging
            echo "📋 Server logs:"
            docker compose -f docker-compose.ci.yml logs test-server
            echo "📋 Test runner logs:"
            docker compose -f docker-compose.ci.yml logs test-runner

            # Cleanup
            docker compose -f docker-compose.ci.yml down -v
            exit 1
          fi

          # Cleanup
          docker compose -f docker-compose.ci.yml down -v
          echo "✅ All tests passed successfully!"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: server/test-results/

  # Build and push image - only on pushes and manual triggers
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save tags to artifact
        run: |
          echo "${{ steps.meta.outputs.tags }}" > image-tags.txt

      - name: Upload tags artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tags
          path: image-tags.txt
          retention-days: 1

  # Deploy to staging - automatic on master push or manual staging trigger
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.target == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Download tags artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tags
          path: ./

      - name: Set image tag
        id: set-tag
        run: |
          IMAGE_TAG=$(sed -n '3p' image-tags.txt)
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Make deploy script executable
        run: chmod +x ./server/scripts/deploy-staging.sh

      - name: Run deployment script
        env:
          CLIENT_URL: ${{vars.VITE_APP_URL}}
          ACCESS_TOKEN_EXPIRATION_TIME_IN_MINUTES: ${{vars.EXPRESS_ACCESS_TOKEN_EXPIRATION_TIME_IN_MINUTES}}
          REFRESH_TOKEN_EXPIRATION_TIME_IN_DAYS: ${{vars.EXPRESS_REFRESH_TOKEN_EXPIRATION_TIME_IN_DAYS}}
          FIREBASE_PROJECT_ID: ${{vars.EXPRESS_FIREBASE_PROJECT_ID}}
          FIREBASE_STORAGE_BUCKET: ${{vars.EXPRESS_FIREBASE_STORAGE_BUCKET}}
          DB_NAME: ${{vars.EXPRESS_DB_NAME}}
          EMAIL_FROM: ${{vars.EXPRESS_EMAIL_FROM}}
          PAGUELO_FACIL_URL: ${{vars.EXPRESS_PAGUELO_FACIL_URL}}
        run: |
          if [ -z "${IMAGE_TAG}" ]; then
            echo "Error: Image tag is empty"
            exit 1
          fi
          ./server/scripts/deploy-staging.sh "${IMAGE_TAG}"

  # Deploy to production - manual trigger only
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && inputs.target == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Download tags artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tags
          path: ./

      - name: Set image tag
        id: set-tag
        run: |
          IMAGE_TAG=$(sed -n '3p' image-tags.txt)
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Make deploy script executable
        run: chmod +x server/scripts/deploy-production.sh

      - name: Deploy to Cloud Run (Production)
        env:
          CLIENT_URL: ${{vars.VITE_APP_URL}}
          ACCESS_TOKEN_EXPIRATION_TIME_IN_MINUTES: ${{vars.EXPRESS_ACCESS_TOKEN_EXPIRATION_TIME_IN_MINUTES}}
          REFRESH_TOKEN_EXPIRATION_TIME_IN_DAYS: ${{vars.EXPRESS_REFRESH_TOKEN_EXPIRATION_TIME_IN_DAYS}}
          FIREBASE_PROJECT_ID: ${{vars.EXPRESS_FIREBASE_PROJECT_ID}}
          FIREBASE_STORAGE_BUCKET: ${{vars.EXPRESS_FIREBASE_STORAGE_BUCKET}}
          DB_NAME: ${{vars.EXPRESS_DB_NAME}}
          EMAIL_FROM: ${{vars.EXPRESS_EMAIL_FROM}}
          PAGUELO_FACIL_URL: ${{vars.EXPRESS_PAGUELO_FACIL_URL}}
        run: |
          if [ -z "${IMAGE_TAG}" ]; then
            echo "Error: Image tag is empty"
            exit 1
          fi
          ./server/scripts/deploy-production.sh "${IMAGE_TAG}"
