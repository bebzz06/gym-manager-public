name: Client CI/CD Pipeline

on:
  push:
    branches: [master]
    paths: ['client/**', 'shared/**', '.github/workflows/client-deploy.yml']
  pull_request:
    branches: [master]
    paths: ['client/**', 'shared/**']
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  # Build and test job
  build-and-test:
    name: Build and Test Client
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && 'staging' || inputs.target }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Build staging
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.target == 'staging')
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_APP_NAME: ${{ vars.VITE_APP_NAME }}
          VITE_APP_URL: ${{ vars.VITE_APP_URL }}
        run: |
          cd client
          npm run build:staging

      - name: Build production
        if: github.event_name == 'workflow_dispatch' && inputs.target == 'production'
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL }}
          VITE_APP_NAME: ${{ vars.VITE_APP_NAME }}
          VITE_APP_URL: ${{ vars.VITE_APP_URL }}
        run: |
          cd client
          npm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build-${{ github.sha }}
          path: client/dist/

  # Deploy to staging (automatic on push to master)
  deploy-staging:
    name: Deploy to Firebase Hosting (Staging)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.target == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build-${{ github.sha }}
          path: client/dist/

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Authenticate to Firebase
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-key.json
          FIREBASE_SERVICE_ACCOUNT_STAGING: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}' > /tmp/firebase-key.json
          firebase use staging

      - name: Deploy to Firebase Hosting (Staging)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-key.json
        run: |
          firebase deploy --only hosting:client --force

      - name: Smoke test staging deployment
        run: |
          sleep 10
          if curl -f "${{ vars.VITE_APP_URL }}" > /dev/null 2>&1; then
            echo "✅ Staging deployment is live and accessible!"
          else
            echo "❌ Staging deployment failed smoke test!"
            exit 1
          fi

  # Deploy to production (manual trigger only)
  deploy-production:
    name: Deploy to Firebase Hosting (Production)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' && inputs.target == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build-${{ github.sha }}
          path: client/dist/

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Authenticate to Firebase
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-key.json
          FIREBASE_SERVICE_ACCOUNT_PRODUCTION: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}' > /tmp/firebase-key.json
          firebase use production

      - name: Deploy to Firebase Hosting (Production)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-key.json
        run: |
          firebase deploy --only hosting:client --force

      - name: Smoke test production deployment
        run: |
          sleep 10
          if curl -f "${{ vars.VITE_APP_URL }}" > /dev/null 2>&1; then
            echo "✅ Production deployment is live and accessible!"
          else
            echo "❌ Production deployment failed smoke test!"
            exit 1
          fi
